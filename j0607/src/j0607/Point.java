package j0607;

public class Point {
	/* 자바는 클래스단위로 구성됨. 클래스는 공통된 구조를 가짐(변수+메서드)
	
	class 클래스명 {
	1. 변수 - 객체의 데이터값을 가지고 있음.
	1-1 인스턴스 변수 iv
	자료형 객체변수n;
	}
	1-2 클래스변수 cv
	static 자료형 객체변수n;
	
	2. 생성자
	객체는 new라는 연산자를 통해 만들어짐 그리고 만들어진 객체는
	기본값으로 초기화됨
	
	생성자를 통해서 인스턴스변수의 값을 초기화할 수 있다
	생성자는 클래스와 같은 이름을 가져야함
	생성자는 메서드가 아니기때문에 리턴이 없음
	생성자는 클래스 변수들이 기본값으로 초기화 된 후 실행됨
	
	
	3. 메서드 - 객체의 기능을 가지고 있음
	[접근제한자] 자료형 메서드명 (매개변수1,...매개변수n){
		코드
		return문 
	}
	- 접근제한자 : 다른객체가 이 메소드를 참조할때 제약사항 지정(생략가능)
	- 자료형 이름 : 메소드의 수행결과로 리턴한 자료형(없을시 void)
	- 메서드 이름 : 정의될 메서드명으로 사용자가 지정
	- 매개변수 : 메서드 처리시 입력될 자료 없을시 생략가능
	
	*/
	// 1. 변수
	int x;	int y;	int z; // 클래스 내 전역변수
	
	// 2. 생성자 - 객체를 만들때 1번 불러짐
	Point(){}
	// 생성자가 한개도 존재하지 않을 경우 기본 생성자가 자동으로 만들어짐
	// 그러나 한개이상의 생성자가 존재한다면 기본생성자를 만들어주지 않으면 사용할 수 없음
	
	
	Point(int n){// 매개변수가 1개인 생성자
		x=n;
	}
	Point(int a, int b){// 매개변수가 2개인 생성자
		//x = a;	y = b; z = 10;
		this(a,b,10);
		//this 는 생성자를 가리킴
	}
	Point(int x, int y, int z){// 매개변수가 3개인 생성자
	// 매개변수의 이름이 인스턴스 변수의 이름과 같음
		this.x = x;	// this 는 객체 자신을 가리킴
		this.y = y; // 매개변수와 인스턴스 변수명이 같을때 this 사용
		this.z = z;
	}
	
	
	// 3. 메서드
	void printXY() {	//im
		System.out.printf("x=%d, y=%d\n",x,y);
	}
	void printXYZ() {	//im
		System.out.printf("x=%d, y=%d, z=%d\n",x,y,z);
	}
}
